import { Context } from 'telegraf';
import createDebug from 'debug';
import PDFDocument from 'pdfkit';
import { PassThrough } from 'stream';

const debug = createDebug('bot:pdf');

// Helper function to generate PDF with user input
const generatePdf = (text: string) => {
  const doc = new PDFDocument();
  const passThroughStream = new PassThrough();
  doc.pipe(passThroughStream);

  // Add content to the PDF
  doc.fontSize(16).text('Eduhub PDF Content', { align: 'center' });
  doc.moveDown();
  doc.fontSize(12).text('This is a sample PDF generated by Eduhub bot.');
  doc.moveDown();
  doc.fontSize(14).text('User Input:', { underline: true });
  doc.moveDown();
  doc.fontSize(12).text(text || 'No custom text provided.');

  // Finalize the PDF document
  doc.end();

  // Return the stream of PDF data
  return passThroughStream;
};

// Main PDF function
const pdf = () => async (ctx: Context) => {
  debug('Triggered "pdf" command');

  const messageText = ctx.message?.text || '';
  const userInput = messageText.replace('/pdf', '').trim(); // Extract text after /pdf

  if (!userInput) {
    await ctx.reply('Please provide text after /pdf. Example: `/pdf This is an example text`');
    return;
  }

  try {
    // Generate PDF with user input
    const pdfStream = generatePdf(userInput);

    // Send the PDF file to the user
    await ctx.replyWithDocument({
      source: pdfStream,
      filename: 'EduhubContent.pdf',
    });

    debug('PDF sent successfully');
  } catch (error) {
    debug('Error generating or sending PDF:', error);
    await ctx.reply('Oops! Something went wrong while generating the PDF.');
  }
};

export { pdf };
